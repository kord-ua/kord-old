<?php

/**
 * URL helper class.
 *
 * @copyright  (c) 2007â€“2014 Kohana Team
 */

namespace KORD\Helper;

class URLSrc
{
    
    /**
     * @var  string  default protocol for base urls
     */
    public static $protocol = 'http';

    /**
     * @var  string  base URL to the application
     */
    public static $base_url = '/';

    /**
     * @var  string  Application index file, added to links generated by KORD
     */
    public static $index_file = 'index.php';

    /**
     * Gets the base URL to the application.
     * To specify a protocol, provide the protocol as a string.
     * If a protocol is used, a complete URL will be generated using the
     * `$_SERVER['HTTP_HOST']` variable.
     *
     *     // Absolute URL path with no host or protocol
     *     echo URL::base();
     *
     *     // Absolute URL path with host, https protocol and index.php if set
     *     echo URL::base('https', true);
     *
     *     // Absolute URL path with host and protocol from $_SERVER
     *     echo URL::base(true);
     *
     * @param   string|boolean    $protocol Protocol string or boolean
     * @param   boolean  $index    Add index file to URL?
     * @return  string
     * @uses    URL::$index_file
     */
    public static function base($protocol = null, $index = false)
    {
        // Start with the configured base URL
        $base_url = URL::$base_url;

        if ($protocol === true) {
            if (!Server::requestSecure()) {
                if (isset($_SERVER['SERVER_PROTOCOL'])) {
                    list($protocol) = explode('/', strtolower($_SERVER['SERVER_PROTOCOL']));
                } else {
                    $protocol = URL::$protocol;
                }
            } else {
                $protocol = 'https';
            }
        }

        if (!$protocol) {
            // Use the configured default protocol
            $protocol = parse_url($base_url, PHP_URL_SCHEME);
        }

        if ($index === true AND ! empty(URL::$index_file)) {
            // Add the index file to the URL
            $base_url .= URL::$index_file . '/';
        }

        if (is_string($protocol)) {
            if ($port = parse_url($base_url, PHP_URL_PORT)) {
                // Found a port, make it usable for the URL
                $port = ':' . $port;
            }

            if ($domain = parse_url($base_url, PHP_URL_HOST)) {
                // Remove everything but the path from the URL
                $base_url = parse_url($base_url, PHP_URL_PATH);
            } else {
                // Attempt to use HTTP_HOST and fallback to SERVER_NAME
                $domain = isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : $_SERVER['SERVER_NAME'];
            }

            // Add the protocol and domain to the base URL
            $base_url = $protocol . '://' . $domain . $port . $base_url;
        }

        return $base_url;
    }

    /**
     * Fetches an absolute site URL based on a URI segment.
     *
     *     echo URL::site('foo/bar');
     *
     * @param   string  $uri        Site URI to convert
     * @param   string|boolean   $protocol   Protocol string or boolean
     * @param   boolean $index		Include the index_page in the URL
     * @return  string
     * @uses    URL::base
     */
    public static function site($uri = '', $protocol = null, $index = true)
    {
        // Chop off possible scheme, host, port, user and pass parts
        $path = preg_replace('~^[-a-z0-9+.]++://[^/]++/?~', '', trim($uri, '/'));

        if (!UTF8::isAscii($path)) {
            // Encode all non-ASCII characters, as per RFC 1738
            $path = preg_replace_callback('~([^/]+)~', '\KORD\Helper\URL::rawurlencodeCallback', $path);
        }

        // Concat the URL
        return URL::base($protocol, $index) . $path;
    }

    /**
     * Callback used for encoding all non-ASCII characters, as per RFC 1738
     * Used by URL::site()
     *
     * @param  array $matches  Array of matches from preg_replace_callback()
     * @return string          Encoded string
     */
    protected static function rawurlencodeCallback($matches)
    {
        return rawurlencode($matches[0]);
    }

    /**
     * Merges the current GET parameters with an array of new or overloaded
     * parameters and returns the resulting query string.
     *
     *     // Returns "?sort=title&limit=10" combined with any existing GET values
     *     $query = URL::query(['sort' => 'title', 'limit' => 10]);
     *
     * Typically you would use this when you are sorting query results,
     * or something similar.
     *
     * [!!] Parameters with a null value are left out.
     *
     * @param   array    $params   Array of GET parameters
     * @param   boolean  $use_get  Include current request GET parameters
     * @return  string
     */
    public static function query(array $params = null, $use_get = true)
    {
        if ($use_get) {
            if ($params === null) {
                // Use only the current parameters
                $params = $_GET;
            } else {
                // Merge the current and new parameters
                $params = Arr::merge($_GET, $params);
            }
        }

        if (empty($params)) {
            // No query parameters
            return '';
        }

        // Note: http_build_query returns an empty string for a params array with only null values
        $query = http_build_query($params, '', '&');

        // Don't prepend '?' to an empty string
        return ($query === '') ? '' : ('?' . $query);
    }

    /**
     * Convert a phrase to a URL-safe title.
     *
     *     echo URL::title('My Blog Post'); // "my-blog-post"
     *
     * @param   string   $title       Phrase to convert
     * @param   string   $separator   Word separator (any single character)
     * @param   boolean  $ascii_only  Transliterate to ASCII?
     * @return  string
     * @uses    \KORD\Helper\UTF8::transliterateToAscii
     * @uses    \KORD\Helper\UTF8::strtolower
     */
    public static function title($title, $separator = '-', $ascii_only = false)
    {
        if ($ascii_only === true) {
            // Transliterate non-ASCII characters
            $title = UTF8::transliterateToAscii($title);

            // Remove all characters that are not the separator, a-z, 0-9, or whitespace
            $title = preg_replace('![^' . preg_quote($separator) . 'a-z0-9\s]+!', '', strtolower($title));
        } else {
            // Remove all characters that are not the separator, letters, numbers, or whitespace
            $title = preg_replace('![^' . preg_quote($separator) . '\pL\pN\s]+!u', '', UTF8::strtolower($title));
        }

        // Replace all separator characters and whitespace by a single separator
        $title = preg_replace('![' . preg_quote($separator) . '\s]+!u', $separator, $title);

        // Trim separators from the beginning and end
        return trim($title, $separator);
    }

}
